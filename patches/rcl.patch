diff --git a/rcl/src/rcl/publisher.c b/rcl/src/rcl/publisher.c
index 59da94d..89f0cb8 100644
--- a/rcl/src/rcl/publisher.c
+++ b/rcl/src/rcl/publisher.c
@@ -35,6 +35,8 @@ extern "C"
 #include "./common.h"
 #include "./publisher_impl.h"
 
+#include <ros2profiling/profiling.h>
+
 rcl_publisher_t
 rcl_get_zero_initialized_publisher()
 {
@@ -308,6 +310,8 @@ rcl_publish(
   const void * ros_message,
   rmw_publisher_allocation_t * allocation)
 {
+  store_profile(publisher->impl->rmw_handle->topic_name, (void*)ros_message, PROFIDX_PUB_RCL_PUBLISH, "rcl_publish", NULL);
+
   RCUTILS_CAN_RETURN_WITH_ERROR_OF(RCL_RET_PUBLISHER_INVALID);
   RCUTILS_CAN_RETURN_WITH_ERROR_OF(RCL_RET_ERROR);
 
diff --git a/rcl/src/rcl/subscription.c b/rcl/src/rcl/subscription.c
index f3628b8..104d622 100644
--- a/rcl/src/rcl/subscription.c
+++ b/rcl/src/rcl/subscription.c
@@ -32,6 +32,8 @@ extern "C"
 #include "./common.h"
 #include "./subscription_impl.h"
 
+#include <ros2profiling/profiling.h>
+
 
 rcl_subscription_t
 rcl_get_zero_initialized_subscription()
@@ -270,6 +272,8 @@ rcl_take(
   rmw_subscription_allocation_t * allocation
 )
 {
+  uint64_t ts = get_timestamp();
+
   RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Subscription taking message");
   if (!rcl_subscription_is_valid(subscription)) {
     return RCL_RET_SUBSCRIPTION_INVALID;  // error message already set
@@ -293,6 +297,8 @@ rcl_take(
   if (!taken) {
     return RCL_RET_SUBSCRIPTION_TAKE_FAILED;
   }
+  store_profile(subscription->impl->rmw_handle->topic_name, ros_message, PROFIDX_SUB_RCL_TAKE_ENTER, "rcl_enter", &ts);
+  store_profile(subscription->impl->rmw_handle->topic_name, ros_message, PROFIDX_SUB_RCL_TAKE_LEAVE, "rcl_leave", NULL);
   return RCL_RET_OK;
 }
 
