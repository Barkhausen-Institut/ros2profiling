diff --git a/rmw_cyclonedds_cpp/src/rmw_node.cpp b/rmw_cyclonedds_cpp/src/rmw_node.cpp
index 1d18e7e..90eb751 100644
--- a/rmw_cyclonedds_cpp/src/rmw_node.cpp
+++ b/rmw_cyclonedds_cpp/src/rmw_node.cpp
@@ -82,6 +82,8 @@
 #include "serdata.hpp"
 #include "demangle.hpp"
 
+#include <ros2profiling/profiling.h>
+
 using namespace std::literals::chrono_literals;
 
 /* Security must be enabled when compiling and requires cyclone to support QOS property lists */
@@ -323,6 +325,7 @@ struct CddsSubscription : CddsEntity
 {
   rmw_gid_t gid;
   dds_entity_t rdcondh;
+  uint64_t ts_ondataavailable;
 };
 
 struct client_service_id_t
@@ -1509,6 +1512,7 @@ extern "C" rmw_ret_t rmw_publish(
   const rmw_publisher_t * publisher, const void * ros_message,
   rmw_publisher_allocation_t * allocation)
 {
+  store_profile(publisher->topic_name, const_cast<void*>(ros_message), PROFIDX_PUB_RMW_PUBLISH, "rmw_publish", NULL);
   static_cast<void>(allocation);    // unused
   RMW_CHECK_FOR_NULL_WITH_MSG(
     publisher, "publisher handle is null",
@@ -1521,6 +1525,7 @@ extern "C" rmw_ret_t rmw_publish(
     return RMW_RET_INVALID_ARGUMENT);
   auto pub = static_cast<CddsPublisher *>(publisher->data);
   assert(pub);
+  store_profile(publisher->topic_name, const_cast<void*>(ros_message), PROFIDX_PUB_DDS_WRITE, "dds_write", NULL);
   if (dds_write(pub->enth, ros_message) >= 0) {
     return RMW_RET_OK;
   } else {
@@ -2547,7 +2552,9 @@ static rmw_ret_t rmw_take_int(
   CddsSubscription * sub = static_cast<CddsSubscription *>(subscription->data);
   RET_NULL(sub);
   dds_sample_info_t info;
+  uint64_t ts_enter = get_timestamp();
   while (dds_take(sub->enth, &ros_message, &info, 1, 1) == 1) {
+    uint64_t ts_leave = get_timestamp();
     if (info.valid_data) {
       *taken = true;
       if (message_info) {
@@ -2560,6 +2567,9 @@ static rmw_ret_t rmw_take_int(
         message_info->source_timestamp = info.source_timestamp;
         // TODO(iluetkeb) add received timestamp, when implemented by Cyclone
         message_info->received_timestamp = 0;
+	store_profile(subscription->topic_name, ros_message, PROFIDX_SUB_DDS_TAKE_ENTER, "dds_take_enter", &ts_enter);
+	store_profile(subscription->topic_name, ros_message, PROFIDX_SUB_DDS_TAKE_LEAVE, "dds_take_leave", &ts_leave);
+	store_profile(subscription->topic_name, ros_message, PROFIDX_SUB_DDS_ONDATA, "dds_ondata", &sub->ts_ondataavailable);
       }
 #if REPORT_LATE_MESSAGES > 0
       dds_time_t tnow = dds_time();
@@ -2738,7 +2748,11 @@ extern "C" rmw_ret_t rmw_take_with_info(
 {
   static_cast<void>(allocation);
   RMW_CHECK_ARGUMENT_FOR_NULL(message_info, RMW_RET_INVALID_ARGUMENT);
-  return rmw_take_int(subscription, ros_message, taken, message_info);
+  uint64_t ts_enter = get_timestamp();
+  auto result = rmw_take_int(subscription, ros_message, taken, message_info);
+  store_profile(subscription->topic_name, ros_message, PROFIDX_SUB_RMW_TAKE_ENTER, "take_enter", &ts_enter);
+  store_profile(subscription->topic_name, ros_message, PROFIDX_SUB_RMW_TAKE_LEAVE, "take_leave", NULL);
+  return result;
 }
 
 extern "C" rmw_ret_t rmw_take_sequence(
@@ -3345,6 +3359,7 @@ extern "C" rmw_ret_t rmw_wait(
   const dds_return_t ntrig = dds_waitset_wait(
     ws->waitseth, ws->trigs.data(),
     ws->trigs.size(), timeout);
+  uint64_t ts_ondata = get_timestamp();
   ws->trigs.resize(ntrig);
   std::sort(ws->trigs.begin(), ws->trigs.end());
   ws->trigs.push_back((dds_attach_t) -1);
@@ -3367,7 +3382,7 @@ extern "C" rmw_ret_t rmw_wait(
       } \
     } \
 } while (0)
-    DETACH(CddsSubscription, subs, subscriber, rdcondh, (void) x);
+    DETACH(CddsSubscription, subs, subscriber, rdcondh, x->ts_ondataavailable=ts_ondata );
     DETACH(
       CddsGuardCondition, gcs, guard_condition, gcondh,
       dds_take_guardcondition(x->gcondh, &dummy));
