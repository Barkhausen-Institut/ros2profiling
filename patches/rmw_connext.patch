diff --git a/rmw_connext_cpp/src/rmw_publish.cpp b/rmw_connext_cpp/src/rmw_publish.cpp
index 4cd3593..9dcdc48 100644
--- a/rmw_connext_cpp/src/rmw_publish.cpp
+++ b/rmw_connext_cpp/src/rmw_publish.cpp
@@ -24,9 +24,12 @@
 // include patched generated code from the build folder
 #include "connext_static_serialized_dataSupport.h"
 
+#include <ros2profiling/profiling.h>
+
 bool
 publish(DDS::DataWriter * dds_data_writer, const rcutils_uint8_array_t * cdr_stream)
 {
+  const size_t OFFSET_CDR_TO_MESSAGE = 4;
   ConnextStaticSerializedDataDataWriter * data_writer =
     ConnextStaticSerializedDataDataWriter::narrow(dds_data_writer);
   if (!data_writer) {
@@ -56,6 +59,15 @@ publish(DDS::DataWriter * dds_data_writer, const rcutils_uint8_array_t * cdr_str
     goto cleanup;
   }
 
+  store_profile(data_writer->get_topic()->get_name(),
+		const_cast<void*>((void*)(cdr_stream->buffer+OFFSET_CDR_TO_MESSAGE)),
+		PROFIDX_PUB_DDS_WRITE, "dds_write", NULL);
+
+  /*    for (unsigned int i = 0; i < cdr_stream->buffer_length; i++) {
+    printf("%05d 0x%02x\n", i, cdr_stream->buffer[i]);
+    }
+  */
+
   status = data_writer->write(*instance, DDS::HANDLE_NIL);
 
 cleanup:
@@ -78,6 +90,7 @@ rmw_publish(
   const void * ros_message,
   rmw_publisher_allocation_t * allocation)
 {
+  store_profile(publisher->topic_name, const_cast<void*>(ros_message), PROFIDX_PUB_RMW_PUBLISH, "rmw_publish", NULL);
   (void) allocation;
   if (!publisher) {
     RMW_SET_ERROR_MSG("publisher handle is null");
diff --git a/rmw_connext_cpp/src/rmw_take.cpp b/rmw_connext_cpp/src/rmw_take.cpp
index 5396339..baa0a3c 100644
--- a/rmw_connext_cpp/src/rmw_take.cpp
+++ b/rmw_connext_cpp/src/rmw_take.cpp
@@ -27,6 +27,8 @@
 #include "./connext_static_serialized_dataSupport.h"
 #include "./connext_static_serialized_data.h"
 
+#include <ros2profiling/profiling.h>
+
 static bool
 is_local_publication(
   const DDS::SampleInfo & sample_info,
@@ -83,6 +85,7 @@ take(
   DDS::SampleInfoSeq sample_infos;
   bool ignore_sample = false;
 
+  uint64_t ts_enter = get_timestamp();
   DDS::ReturnCode_t status = data_reader->take(
     dds_messages,
     sample_infos,
@@ -90,6 +93,7 @@ take(
     DDS::ANY_SAMPLE_STATE,
     DDS::ANY_VIEW_STATE,
     DDS::ANY_INSTANCE_STATE);
+  uint64_t ts_leave = get_timestamp();
   if (status == DDS::RETCODE_NO_DATA) {
     data_reader->return_loan(dds_messages, sample_infos);
     *taken = false;
@@ -127,6 +131,14 @@ take(
       return false;
     }
     memcpy(cdr_stream->buffer, &dds_messages[0].serialized_data[0], cdr_stream->buffer_length);
+    const size_t OFFSET_CDR_TO_MESSAGE = 4;
+    const char* topic = dds_data_reader->get_topicdescription()->get_name();
+    store_profile(topic,
+		  cdr_stream->buffer+OFFSET_CDR_TO_MESSAGE,
+		  PROFIDX_SUB_DDS_TAKE_ENTER, "dds_take_enter", &ts_enter);
+    store_profile(topic,
+		  cdr_stream->buffer+OFFSET_CDR_TO_MESSAGE,
+		  PROFIDX_SUB_DDS_TAKE_LEAVE, "dds_take_leave", &ts_leave);
 
     *taken = true;
   } else {
@@ -358,6 +370,7 @@ rmw_take_with_info(
   rmw_message_info_t * message_info,
   rmw_subscription_allocation_t * allocation)
 {
+  uint64_t ts = get_timestamp();
   if (!message_info) {
     RMW_SET_ERROR_MSG("message info is null");
     return RMW_RET_ERROR;
@@ -375,6 +388,9 @@ rmw_take_with_info(
   auto detail = reinterpret_cast<ConnextPublisherGID *>(sender_gid->data);
   detail->publication_handle = sending_publication_handle;
 
+  store_profile(subscription->topic_name, ros_message, PROFIDX_SUB_RMW_TAKE_ENTER, "rmw_take_enter", &ts);
+  store_profile(subscription->topic_name, ros_message, PROFIDX_SUB_RMW_TAKE_LEAVE, "rmw_take_leave", NULL);
+
   return RMW_RET_OK;
 }
 
